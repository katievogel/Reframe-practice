{"version":3,"sources":["com/github/katievogel/reframe_practice/views.cljs"],"mappings":";AAQA,AAAA,AAAMA;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAI0C,AAAA,AAAA,AAAA,AAACC;AAJ3C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAOwC,AAAA,AAAA,AAAA,AAACA;AAPzC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAUoC,AAAA,AAAA,AAAA,AAACA;AAVrC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAasC,AAAA,AAAA,AAAA,AAACA;AAbvC;;AAgBA,AAAA,AAACC,AAEC,AAAAC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASG;AAAT,AACE,AAAA,AAAaD;;AAEjB,AAAA,AAACJ,AAEC,AAAAM,AAAKF;AAAL,AAAA,AAAAG,AAAAD;AAAA,AAAAH,AAAAI,AAAA,AAAA,AAASF;AAAT,AACED;;AAEJ,AAAA,AAAMI;AAAN,AACE,AAAA,AAAAC,AAAMC,AAAY,AAAA,AAAA,AAACC;AAAnB,AACE,AAAM,AAAA,AAACC,AAAEF;AAAT,AAAmCG;;AAAnC,AACM,AAAA,AAACD,AAAEF;AADT,AACiCI;;AADjC,AAEM,AAAA,AAACF,AAAEF;AAFT,AAE6BK;;AAF7B,AAGM,AAAA,AAACH,AAAEF;AAHT,AAG+BM;;AAH/B;;;;;;AAKJ,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGInB,AACAU,AACK,AAAA,AAAAC,AAACS,AAAQ,AAAA,AAAA,AAACP;;AAEnB,AAAA,AAACQ,AAEC,AAAAC,AAAKhB;AAAL,AAAA,AAAAiB,AAAAD;AAAA,AAAAjB,AAAAkB,AAAA,AAAA,AAAShB;AAAT,AAAAF,AAAAkB,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAACC,AAAMnB,AAAekB","names":["com.github.katievogel.reframe-practice.views/TabRow","re-frame.core/dispatch","re_frame.core.reg_sub","p__45693","vec__45694","cljs.core.nth","db","_","p__45697","vec__45698","com.github.katievogel.reframe-practice.views/TabContent","cljs.core/deref","active-tab","re_frame.core.subscribe","cljs.core._EQ_","com.github.katievogel.reframe-practice.hello/hello-react-text","com.github.katievogel.reframe-practice.paragraph/paragraphs","com.github.katievogel.reframe-practice.login/login","com.github.katievogel.reframe-practice.funppl/fun-people","com.github.katievogel.reframe-practice.views/ReframePracticeApp","cljs.core.pr_str","re_frame.core.reg_event_db","p__45701","vec__45702","tab","cljs.core.assoc"],"sourcesContent":["(ns com.github.katievogel.reframe-practice.views\n  (:require [com.github.katievogel.reframe-practice.hello :refer [hello-react-text]]\n            [com.github.katievogel.reframe-practice.paragraph :refer [paragraphs]]\n            [com.github.katievogel.reframe-practice.login :refer [login]]\n            [com.github.katievogel.reframe-practice.funppl :refer [fun-people]]\n            [com.github.katievogel.reframe-practice.state :refer [initial-state]]\n            [re-frame.core :as rf]))\n\n(defn TabRow []\n  [:div\n   [:ul.nav.nav-tabs\n    [:li.nav-item\n     [:a.nav-link.hello-react {:on-click #(rf/dispatch [:tab-focus :hello-react])}\n      \"Hello React\"]]\n    [:li.nav-item\n     [:a.nav-link.paragraph {:on-click #(rf/dispatch [:tab-focus :paragraph])}\n      \"Lorem Ipsum\"]]\n    [:li.nav-item\n     [:a.nav-link.login {:on-click #(rf/dispatch [:tab-focus :login])}\n      \"Login Form\"]]\n    [:li.nav-item\n     [:a.nav-link.fun-ppl {:on-click #(rf/dispatch [:tab-focus :fun-ppl])}\n      \"Fun People\"]]]])\n\n(rf/reg-sub\n  :get-active-tab\n  (fn [db [_]]\n    (:active-tab db)))\n\n(rf/reg-sub\n  :get-db\n  (fn [db [_]]\n    db))\n\n(defn TabContent []\n  (let [active-tab @(rf/subscribe [:get-active-tab])]\n    (cond (= active-tab :hello-react) [hello-react-text]\n          (= active-tab :paragraph) [paragraphs]\n          (= active-tab :login) [login]\n          (= active-tab :fun-ppl) [fun-people])))\n\n(defn ReframePracticeApp []\n  [:div\n   [:h1 \"my app\"]\n   [TabRow]\n   [TabContent]\n   [:pre (pr-str @(rf/subscribe [:get-db]))]])\n\n(rf/reg-event-db\n  :tab-focus\n  (fn [db [_ tab]]\n    (assoc db :active-tab tab)))"]}